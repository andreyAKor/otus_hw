// Code generated by cool go-validate tool; DO NOT EDIT.
package models

import (
	"fmt"
	"regexp"
)

// User validator
func (u User) Validate() ([]ValidationError, error) {
	var errs []ValidationError

	if len(u.ID) != 36 {
		errs = append(errs, ValidationError{
			Field: "ID",

			Err: "field \"ID\" must be length is 36",
		})
	}

	if u.Age < 18 {
		errs = append(errs, ValidationError{
			Field: "Age",

			Err: "field \"Age\" must be min is 18",
		})
	}

	if u.Age > 50 {
		errs = append(errs, ValidationError{
			Field: "Age",

			Err: "field \"Age\" must be max is 50",
		})
	}

	{
		matched, err := regexp.MatchString("^\\w+@\\w+\\.\\w+$", u.Email)
		if err != nil {
			return errs, err
		}
		if matched == false {
			errs = append(errs, ValidationError{
				Field: "Email",

				Err: "field \"Email\" must be in regexp \"^\\w+@\\w+\\.\\w+$\"",
			})
		}
	}

	if !(u.Role == "admin" || u.Role == "stuff") {
		errs = append(errs, ValidationError{
			Field: "Role",

			Err: "field \"Role\" must be in range [admin stuff]",
		})
	}

	for i := range u.Phones {

		if len(u.Phones[i]) != 11 {
			errs = append(errs, ValidationError{
				Field: "Phones",

				Err: fmt.Sprintf("field \"Phones\" must be length is 11 in index %d", i),
			})
		}

	}

	return errs, nil
}

// App validator
func (a App) Validate() ([]ValidationError, error) {
	var errs []ValidationError

	if len(a.Version) != 5 {
		errs = append(errs, ValidationError{
			Field: "Version",

			Err: "field \"Version\" must be length is 5",
		})
	}

	return errs, nil
}

// Response validator
func (r Response) Validate() ([]ValidationError, error) {
	var errs []ValidationError

	if !(r.Code == 200 || r.Code == 404 || r.Code == 500) {
		errs = append(errs, ValidationError{
			Field: "Code",

			Err: "field \"Code\" must be in range [200 404 500]",
		})
	}

	return errs, nil
}

// This struct cointains validation error description
type ValidationError struct {
	Field string
	Err   string
}
