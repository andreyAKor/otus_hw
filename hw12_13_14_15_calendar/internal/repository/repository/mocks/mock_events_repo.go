// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	repository "github.com/andreyAKor/otus_hw/hw12_13_14_15_calendar/internal/repository/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockEventsRepo is a mock of EventsRepo interface
type MockEventsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEventsRepoMockRecorder
}

// MockEventsRepoMockRecorder is the mock recorder for MockEventsRepo
type MockEventsRepoMockRecorder struct {
	mock *MockEventsRepo
}

// NewMockEventsRepo creates a new mock instance
func NewMockEventsRepo(ctrl *gomock.Controller) *MockEventsRepo {
	mock := &MockEventsRepo{ctrl: ctrl}
	mock.recorder = &MockEventsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventsRepo) EXPECT() *MockEventsRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEventsRepo) Create(ctx context.Context, ev repository.Event) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ev)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockEventsRepoMockRecorder) Create(ctx, ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventsRepo)(nil).Create), ctx, ev)
}

// Update mocks base method
func (m *MockEventsRepo) Update(ctx context.Context, id int64, ev repository.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEventsRepoMockRecorder) Update(ctx, id, ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEventsRepo)(nil).Update), ctx, id, ev)
}

// Delete mocks base method
func (m *MockEventsRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEventsRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventsRepo)(nil).Delete), ctx, id)
}

// DeleteOld mocks base method
func (m *MockEventsRepo) DeleteOld(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOld", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOld indicates an expected call of DeleteOld
func (mr *MockEventsRepoMockRecorder) DeleteOld(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOld", reflect.TypeOf((*MockEventsRepo)(nil).DeleteOld), ctx)
}

// GetListByDate mocks base method
func (m *MockEventsRepo) GetListByDate(ctx context.Context, date time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByDate", ctx, date)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByDate indicates an expected call of GetListByDate
func (mr *MockEventsRepoMockRecorder) GetListByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByDate", reflect.TypeOf((*MockEventsRepo)(nil).GetListByDate), ctx, date)
}

// GetListByWeek mocks base method
func (m *MockEventsRepo) GetListByWeek(ctx context.Context, start time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByWeek", ctx, start)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByWeek indicates an expected call of GetListByWeek
func (mr *MockEventsRepoMockRecorder) GetListByWeek(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByWeek", reflect.TypeOf((*MockEventsRepo)(nil).GetListByWeek), ctx, start)
}

// GetListByMonth mocks base method
func (m *MockEventsRepo) GetListByMonth(ctx context.Context, start time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByMonth", ctx, start)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByMonth indicates an expected call of GetListByMonth
func (mr *MockEventsRepoMockRecorder) GetListByMonth(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByMonth", reflect.TypeOf((*MockEventsRepo)(nil).GetListByMonth), ctx, start)
}

// MockDBEventsRepo is a mock of DBEventsRepo interface
type MockDBEventsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBEventsRepoMockRecorder
}

// MockDBEventsRepoMockRecorder is the mock recorder for MockDBEventsRepo
type MockDBEventsRepoMockRecorder struct {
	mock *MockDBEventsRepo
}

// NewMockDBEventsRepo creates a new mock instance
func NewMockDBEventsRepo(ctrl *gomock.Controller) *MockDBEventsRepo {
	mock := &MockDBEventsRepo{ctrl: ctrl}
	mock.recorder = &MockDBEventsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBEventsRepo) EXPECT() *MockDBEventsRepoMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockDBEventsRepo) Connect(ctx context.Context, dsn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, dsn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockDBEventsRepoMockRecorder) Connect(ctx, dsn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBEventsRepo)(nil).Connect), ctx, dsn)
}

// Close mocks base method
func (m *MockDBEventsRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDBEventsRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBEventsRepo)(nil).Close))
}

// Create mocks base method
func (m *MockDBEventsRepo) Create(ctx context.Context, ev repository.Event) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ev)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDBEventsRepoMockRecorder) Create(ctx, ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDBEventsRepo)(nil).Create), ctx, ev)
}

// Update mocks base method
func (m *MockDBEventsRepo) Update(ctx context.Context, id int64, ev repository.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDBEventsRepoMockRecorder) Update(ctx, id, ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDBEventsRepo)(nil).Update), ctx, id, ev)
}

// Delete mocks base method
func (m *MockDBEventsRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDBEventsRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDBEventsRepo)(nil).Delete), ctx, id)
}

// DeleteOld mocks base method
func (m *MockDBEventsRepo) DeleteOld(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOld", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOld indicates an expected call of DeleteOld
func (mr *MockDBEventsRepoMockRecorder) DeleteOld(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOld", reflect.TypeOf((*MockDBEventsRepo)(nil).DeleteOld), ctx)
}

// GetListByDate mocks base method
func (m *MockDBEventsRepo) GetListByDate(ctx context.Context, date time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByDate", ctx, date)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByDate indicates an expected call of GetListByDate
func (mr *MockDBEventsRepoMockRecorder) GetListByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByDate", reflect.TypeOf((*MockDBEventsRepo)(nil).GetListByDate), ctx, date)
}

// GetListByWeek mocks base method
func (m *MockDBEventsRepo) GetListByWeek(ctx context.Context, start time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByWeek", ctx, start)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByWeek indicates an expected call of GetListByWeek
func (mr *MockDBEventsRepoMockRecorder) GetListByWeek(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByWeek", reflect.TypeOf((*MockDBEventsRepo)(nil).GetListByWeek), ctx, start)
}

// GetListByMonth mocks base method
func (m *MockDBEventsRepo) GetListByMonth(ctx context.Context, start time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByMonth", ctx, start)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByMonth indicates an expected call of GetListByMonth
func (mr *MockDBEventsRepoMockRecorder) GetListByMonth(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByMonth", reflect.TypeOf((*MockDBEventsRepo)(nil).GetListByMonth), ctx, start)
}
