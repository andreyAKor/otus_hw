// Code generated by MockGen. DO NOT EDIT.
// Source: calendar.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	repository "github.com/andreyAKor/otus_hw/hw12_13_14_15_calendar/internal/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockCalendarer is a mock of Calendarer interface
type MockCalendarer struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarerMockRecorder
}

// MockCalendarerMockRecorder is the mock recorder for MockCalendarer
type MockCalendarerMockRecorder struct {
	mock *MockCalendarer
}

// NewMockCalendarer creates a new mock instance
func NewMockCalendarer(ctrl *gomock.Controller) *MockCalendarer {
	mock := &MockCalendarer{ctrl: ctrl}
	mock.recorder = &MockCalendarerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalendarer) EXPECT() *MockCalendarerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCalendarer) Create(ctx context.Context, ev repository.Event) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ev)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCalendarerMockRecorder) Create(ctx, ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCalendarer)(nil).Create), ctx, ev)
}

// Update mocks base method
func (m *MockCalendarer) Update(ctx context.Context, id int64, ev repository.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCalendarerMockRecorder) Update(ctx, id, ev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCalendarer)(nil).Update), ctx, id, ev)
}

// Delete mocks base method
func (m *MockCalendarer) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCalendarerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCalendarer)(nil).Delete), ctx, id)
}

// DeleteOld mocks base method
func (m *MockCalendarer) DeleteOld(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOld", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOld indicates an expected call of DeleteOld
func (mr *MockCalendarerMockRecorder) DeleteOld(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOld", reflect.TypeOf((*MockCalendarer)(nil).DeleteOld), ctx)
}

// GetListByDate mocks base method
func (m *MockCalendarer) GetListByDate(ctx context.Context, date time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByDate", ctx, date)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByDate indicates an expected call of GetListByDate
func (mr *MockCalendarerMockRecorder) GetListByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByDate", reflect.TypeOf((*MockCalendarer)(nil).GetListByDate), ctx, date)
}

// GetListByWeek mocks base method
func (m *MockCalendarer) GetListByWeek(ctx context.Context, start time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByWeek", ctx, start)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByWeek indicates an expected call of GetListByWeek
func (mr *MockCalendarerMockRecorder) GetListByWeek(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByWeek", reflect.TypeOf((*MockCalendarer)(nil).GetListByWeek), ctx, start)
}

// GetListByMonth mocks base method
func (m *MockCalendarer) GetListByMonth(ctx context.Context, start time.Time) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByMonth", ctx, start)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByMonth indicates an expected call of GetListByMonth
func (mr *MockCalendarerMockRecorder) GetListByMonth(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByMonth", reflect.TypeOf((*MockCalendarer)(nil).GetListByMonth), ctx, start)
}
